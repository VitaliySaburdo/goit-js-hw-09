{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,qBAClCC,UAAWF,SAASC,cAAc,oBAClCE,OAAQH,SAASC,cAAc,sBAC/BG,UAAWJ,SAASC,cAAc,WA8BpC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IApCPT,EAAKM,UAAUW,iBAAiB,SAEhC,SAAqBC,GACnBA,EAAIC,iBAKJ,IAJA,IAAIC,EAAQC,OAAOrB,EAAKC,UAAUqB,OAC5BC,EAAOF,OAAOrB,EAAKI,UAAUkB,OAC7BjB,EAASgB,OAAOrB,EAAKK,OAAOiB,OAEzBE,EAAI,EAAGA,EAAInB,EAAQmB,IAAK,CAC/B,IAAIC,EAAWD,EAAI,EACfC,EAAW,IACbL,GAASG,GAEXhB,EAAckB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,MAAK,CAC9DsB,SAAO,G,IAGZC,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBX,EAAA8B,OAAOK,QAAQ,sBAAqCH,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,MAAK,CAC7DsB,SAAS,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  fistDelay: document.querySelector('input[name=delay]'),\n  delayStep: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n  submitBtn: document.querySelector('button'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmitBtn);\n\nfunction onSubmitBtn(evt) {\n  evt.preventDefault();\n  let delay = Number(refs.fistDelay.value);\n  const step = Number(refs.delayStep.value);\n  const amount = Number(refs.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    let position = i + 1;\n    if (position > 1) {\n      delay += step;\n    }\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          useIcon: false,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          useIcon: false,\n        });\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","fistDelay","document","querySelector","delayStep","amount","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delay1","Number","value","step","i","position1","then","param","Notify","success","concat","useIcon","catch","failure"],"version":3,"file":"03-promises.5c890d5a.js.map"}